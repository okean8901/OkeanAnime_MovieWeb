@model Okean_AnimeMovie.ViewComponents.NotificationViewModel

<div class="notification-container">
    <!-- Notification Bell -->
    <div class="position-relative">
        <button class="btn btn-link text-light position-relative" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="bi bi-bell fs-5"></i>
            @if (Model.UnreadCount > 0)
            {
                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                    @(Model.UnreadCount > 99 ? "99+" : Model.UnreadCount.ToString())
                </span>
            }
        </button>
        
        <!-- Notification Dropdown -->
        <div class="dropdown-menu dropdown-menu-end border-0 shadow-lg" style="width: 350px; max-height: 500px; overflow-y: auto;">
            <div class="dropdown-header d-flex justify-content-between align-items-center p-3 border-bottom">
                <h6 class="mb-0 fw-bold">Thông báo</h6>
                @if (Model.UnreadCount > 0)
                {
                    <button class="btn btn-sm btn-outline-primary" onclick="markAllAsRead()">
                        Đánh dấu đã đọc
                    </button>
                }
            </div>
            
            @if (!Model.RecentNotifications.Any())
            {
                <div class="text-center py-4">
                    <i class="bi bi-bell-slash text-muted display-6"></i>
                    <p class="text-muted mb-0 mt-2">Không có thông báo nào</p>
                </div>
            }
            else
            {
                <div class="notification-list">
                    @foreach (var notification in Model.RecentNotifications)
                    {
                        <div class="notification-item p-3 border-bottom @(!notification.IsRead ? "bg-light" : "")" 
                             data-notification-id="@notification.Id">
                            <div class="d-flex align-items-start gap-3">
                                <div class="notification-icon">
                                    @switch (notification.Type)
                                    {
                                        case "episode":
                                            <i class="bi bi-play-circle-fill text-primary"></i>
                                            break;
                                        case "update":
                                            <i class="bi bi-arrow-clockwise text-warning"></i>
                                            break;
                                        case "welcome":
                                            <i class="bi bi-person-plus-fill text-success"></i>
                                            break;
                                        case "password_reset":
                                            <i class="bi bi-shield-lock text-info"></i>
                                            break;
                                        default:
                                            <i class="bi bi-bell text-secondary"></i>
                                            break;
                                    }
                                </div>
                                <div class="notification-content flex-grow-1">
                                    <h6 class="mb-1 fw-bold @(!notification.IsRead ? "text-primary" : "")">
                                        @notification.Title
                                    </h6>
                                    @if (!string.IsNullOrEmpty(notification.Message))
                                    {
                                        <p class="mb-1 text-muted small">@notification.Message</p>
                                    }
                                    <small class="text-muted">
                                        @notification.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                                    </small>
                                </div>
                                @if (!notification.IsRead)
                                {
                                    <div class="notification-status">
                                        <span class="badge bg-primary rounded-pill">Mới</span>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                
                <div class="dropdown-footer p-3 text-center border-top">
                    <a href="#" class="text-decoration-none text-primary fw-medium">
                        Xem tất cả thông báo
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .notification-container .dropdown-menu {
        border-radius: 15px;
        padding: 0;
    }
    
    .notification-item {
        transition: all 0.3s ease;
        cursor: pointer;
    }
    
    .notification-item:hover {
        background-color: #f8f9fa !important;
        transform: translateX(5px);
    }
    
    .notification-icon {
        font-size: 1.2rem;
        width: 24px;
        text-align: center;
    }
    
    .notification-content h6 {
        font-size: 0.9rem;
        line-height: 1.2;
    }
    
    .notification-content p {
        font-size: 0.8rem;
        line-height: 1.3;
    }
    
    .notification-status .badge {
        font-size: 0.7rem;
    }
    
    .dropdown-header {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 15px 15px 0 0;
    }
    
    .dropdown-footer {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 0 0 15px 15px;
    }
</style>

<script>
    function markAllAsRead() {
        fetch('/api/notifications/mark-all-read', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => {
            if (response.ok) {
                location.reload();
            }
        })
        .catch(error => {
            console.error('Error marking notifications as read:', error);
        });
    }
    
    // Mark individual notification as read
    document.addEventListener('DOMContentLoaded', function() {
        const notificationItems = document.querySelectorAll('.notification-item');
        
        notificationItems.forEach(item => {
            item.addEventListener('click', function() {
                const notificationId = this.dataset.notificationId;
                if (notificationId) {
                    fetch(`/api/notifications/${notificationId}/mark-read`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    })
                    .then(response => {
                        if (response.ok) {
                            this.classList.remove('bg-light');
                            this.querySelector('.notification-status .badge')?.remove();
                            this.querySelector('.notification-content h6')?.classList.remove('text-primary');
                        }
                    })
                    .catch(error => {
                        console.error('Error marking notification as read:', error);
                    });
                }
            });
        });
    });
</script>
