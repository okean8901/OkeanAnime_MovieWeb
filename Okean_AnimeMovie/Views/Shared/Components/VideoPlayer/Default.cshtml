@model string

<div class="video-player-container">
    <div class="video-wrapper position-relative">
        @if (!string.IsNullOrEmpty(Model))
        {
            <video id="animeVideo" class="w-100" controls preload="metadata" poster="">
                <source src="@Model" type="video/mp4">
                <source src="@Model" type="video/webm">
                <source src="@Model" type="video/ogg">
                Trình duyệt của bạn không hỗ trợ video.
            </video>
            
            <!-- Custom Controls -->
            <div class="custom-controls d-none">
                <div class="progress-container">
                    <div class="progress-bar">
                        <div class="progress-fill"></div>
                    </div>
                </div>
                <div class="controls-buttons">
                    <button class="btn btn-sm btn-outline-light play-pause">
                        <i class="bi bi-play-fill"></i>
                    </button>
                    <span class="time-display text-light ms-2"></span>
                    <button class="btn btn-sm btn-outline-light fullscreen ms-auto">
                        <i class="bi bi-arrows-fullscreen"></i>
                    </button>
                </div>
            </div>
        }
        else
        {
            <div class="video-placeholder d-flex align-items-center justify-content-center" style="height: 400px; background: linear-gradient(45deg, #1e3a8a, #3b82f6);">
                <div class="text-center text-white">
                    <i class="bi bi-play-circle display-1"></i>
                    <h4 class="mt-3">Video không khả dụng</h4>
                    <p class="mb-0">Video này chưa được cập nhật hoặc không tồn tại.</p>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .video-player-container {
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }
    
    .video-wrapper {
        background: #000;
    }
    
    .video-wrapper video {
        border-radius: 15px;
    }
    
    .custom-controls {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background: linear-gradient(transparent, rgba(0,0,0,0.8));
        padding: 20px;
        border-radius: 0 0 15px 15px;
    }
    
    .progress-container {
        margin-bottom: 15px;
    }
    
    .progress-bar {
        width: 100%;
        height: 4px;
        background: rgba(255,255,255,0.3);
        border-radius: 2px;
        cursor: pointer;
    }
    
    .progress-fill {
        height: 100%;
        background: #3b82f6;
        border-radius: 2px;
        width: 0%;
        transition: width 0.1s ease;
    }
    
    .controls-buttons {
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .time-display {
        font-family: monospace;
        font-size: 14px;
    }
    
    .video-placeholder {
        border-radius: 15px;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const video = document.getElementById('animeVideo');
        if (!video) return;
        
        // Auto-hide controls on mobile
        if (window.innerWidth <= 768) {
            video.controls = true;
        } else {
            video.controls = false;
            setupCustomControls();
        }
        
        function setupCustomControls() {
            const customControls = document.querySelector('.custom-controls');
            const playPauseBtn = document.querySelector('.play-pause');
            const progressFill = document.querySelector('.progress-fill');
            const timeDisplay = document.querySelector('.time-display');
            const fullscreenBtn = document.querySelector('.fullscreen');
            
            if (!customControls) return;
            
            customControls.classList.remove('d-none');
            
            // Play/Pause
            playPauseBtn.addEventListener('click', function() {
                if (video.paused) {
                    video.play();
                    this.innerHTML = '<i class="bi bi-pause-fill"></i>';
                } else {
                    video.pause();
                    this.innerHTML = '<i class="bi bi-play-fill"></i>';
                }
            });
            
            // Progress bar
            video.addEventListener('timeupdate', function() {
                const percent = (video.currentTime / video.duration) * 100;
                progressFill.style.width = percent + '%';
                
                const currentTime = formatTime(video.currentTime);
                const duration = formatTime(video.duration);
                timeDisplay.textContent = `${currentTime} / ${duration}`;
            });
            
            // Click on progress bar
            document.querySelector('.progress-bar').addEventListener('click', function(e) {
                const rect = this.getBoundingClientRect();
                const percent = (e.clientX - rect.left) / rect.width;
                video.currentTime = percent * video.duration;
            });
            
            // Fullscreen
            fullscreenBtn.addEventListener('click', function() {
                if (document.fullscreenElement) {
                    document.exitFullscreen();
                } else {
                    video.requestFullscreen();
                }
            });
            
            // Video events
            video.addEventListener('play', function() {
                playPauseBtn.innerHTML = '<i class="bi bi-pause-fill"></i>';
            });
            
            video.addEventListener('pause', function() {
                playPauseBtn.innerHTML = '<i class="bi bi-play-fill"></i>';
            });
            
            video.addEventListener('ended', function() {
                playPauseBtn.innerHTML = '<i class="bi bi-play-fill"></i>';
            });
        }
        
        function formatTime(seconds) {
            const mins = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${mins}:${secs.toString().padStart(2, '0')}`;
        }
    });
</script>
